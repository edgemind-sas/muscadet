# -*- coding: utf-8 -*-
#+TITLE: PyCATSHOO modelling with COD3S - Simple block diagram example
#+AUTHOR: Roland Donat
#+EMAIL: roland.donat@edgemind.net
# #+DATE: 

# ==============================================
# Document Configuration
# ======================
# Orgmode
:CONFIG:
#+LANGUAGE: fr
#+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} f:t TeX:t author:t d:nil timestamp:nil
#+OPTIONS: html-postamble:nil
#+STARTUP: content 
#+STARTUP: hidestars
#+DRAWERS: CONFIG OPTIONS CACHE MACROS
#+TODO: TODO(t) INPROGRESS(p) | DONE(d)
#+BIND: org-latex-table-scientific-notation "{%s}E{%s}"
# #+csl-style: ../ieee.csl
:END:

# HTML
# ----
:CONFIG:
# Org HTML Macros
#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@
#+MACRO: HTMLFONTSIZE @@html:<font size="$2">$1</font>@@
#+MACRO: SUBTITLE @@html:<div class="slidesubtitle">$1</div>@@

# HTML options
# ------------
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://edgemind-sas.github.io/visual-identity/official_docs/css/edgemind.css" />
:END:

# Publishing configuration
:CONFIG:
#+BEGIN_SRC emacs-lisp :results silent :exports none :eval yes
(defun my-org-export-all ()
  "Export current Org file to HTML, Markdown and tangle code blocks."
  (interactive)
  ;; Export to HTML
  (org-html-export-to-html)
  ;; Export to Markdown
  (org-md-export-to-markdown)
  ;; Tangle the document (extract code blocks)
  (org-babel-tangle))

;; Vous pouvez lier cette fonction Ã  une combinaison de touches si vous le souhaitez.
(global-set-key (kbd "C-c e a") 'my-org-export-all)
#+END_SRC
:END:


# ==============================================
# Document starts here
# ====================

# Configuration de l'environnement                           
# --------------------------------

#+NAME: python-imports
#+BEGIN_SRC python :exports none
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import mosaic
#+END_SRC

#+BEGIN_SRC python :session :results silent :exports results :tangle dm2ml_tuto_01.py :noweb yes
<<python-imports>>
#+END_SRC

* Introduction
   :PROPERTIES:
   :CUSTOM_ID: introduction
   :END:

This tutorial demonstrates how to use the COD3S backend to drive a system model written using the
PyCATSHOO framework. 

* Installation
   :PROPERTIES:
   :CUSTOM_ID: init-env
   :END:

First, you need to install the PyCATSHOO library by following the steps explained on the official
PyCATSHOO website: [[http://www.pycatshoo.org/Download.html]]. 

To verify the successful installation of PyCATSHOO, open a Python terminal and execute:
#+BEGIN_SRC python :session init_env :results output :exports both
import Pycashoo
#+END_SRC
If no errors are raised, the installation is correct.

Next, install the MUSCADET library in your environment from GitHub:
#+BEGIN_SRC shell
pip install https://github.com/edgemind-sas/muscadet.git          
#+END_SRC
*Note:* MUSCADET is a system modeling library that extends PyCATSHOO to facilitate complex system
representation. MUSCADET automatically installs the COD3S library as a dependency.  

After the installation, you should be able to import the COD3S module in a Python session: 
#+BEGIN_SRC python :session init_env :results output :exports both
import cod3s
#+END_SRC

* System creation

Let's suppose we have a PyCATSHOO knowledge base representing a simplified version of block diagram
formalism in the =kb.py= file: 
#+BEGIN_SRC python :eval no :exports code :tangle kb.py
import muscadet

class Source(muscadet.ObjFlow):

    def add_flows(self, **kwargs):

        super().add_flows(**kwargs)

        self.add_flow_out(
            name="flow",
        )

class Block(muscadet.ObjFlow):

    def add_flows(self, **kwargs):

        super().add_flows(**kwargs)

        self.add_flow_in(
            name="flow",
        )

        self.add_flow_out(
            name="flow",
            var_prod_cond=[
                "flow",
            ]
        )
#+END_SRC

This knowledge base represents the behavior of basic elements that can be used to build a system
model. In the file =system.py=, we create a class representing a simple system with =Source= and
=Block= elements : 
#+BEGIN_SRC python :eval no :exports code :tangle system.py
import kb
import muscadet

class MySystem(muscadet.System):
    def __init__(self, name):
        super().__init__(name)

        self.add_component(cls="Source",
                           name="S")
        
        self.add_component(cls="Block",
                           name="C1")

        self.add_component(cls="Block",
                           name="C2")

        self.auto_connect("S", "C.")

        self.add_logic_or("LO__C", {"C.": ".*"},
                          )

        self.add_logic_or("LI__C", {"C.": ".*"},
                          on_available=True,
                          )

        param_s = dict(
            name="frun",
            failure_time=5,
            repair_time=3,
            failure_effects=[(".*_available_out", False)],
        )

        param_c = dict(
            name="frun",
            failure_time=12,
            repair_time=2,
            failure_effects=[(".*_available_out", False)],
        )
        
        self.comp["S"].add_delay_failure_mode(**param_s)
        self.comp["C1"].add_delay_failure_mode(**param_c)
        self.comp["C2"].add_delay_failure_mode(**param_c)
#+END_SRC

* Initialize a COD3S project

Using a COD3S project while developping a system model with Pycatshoo gives you access to
interesting features like system visualization, interactive simulation, results management, etc.

To configure a COD3S, simply add a =project.yaml= in the directory where you placed your =kb.py= and
=system.py= files. Here is an example for our current project :
#+BEGIN_SRC python :eval no :exports code :tangle project.yaml
project_name: COD3S tutorial with MUSCADET Block diagram
system_name: My first block diagram
system_filename: system.py
system_class_name: MySystem
viz_specs_filename: viz_specs.yaml
#+END_SRC
- =project_name=: The name of the project, "COD3S tutorial with MUSCADET Block diagram"
- =system_name=: The name of the system being modeled, "My first block diagram"
- =system_filename=: The Python file that contains the system class, `system.py`
- =system_class_name=: The name of the class within `system.py` that represents the system, `MySystem` 


* Step 2: creating predictive models

We will now define both the predictive models for upward and downward future returns. To do this, we
use the logistic regression model implemented in the =PMLogit= class. 

** Upward movement

In this example, we configure our predictive model to predict upward future returns on a temporal horizon
of 15 time units forward:
#+BEGIN_SRC python :session :exports both :tangle dm2ml_tuto_01.py
import mosaic.predict_model as mpr

pm_up = mpr.PMLogit(
    returns_horizon=15,
    direction="up",
    threshold=0.00001,
    features=[indic_1, indic_2],
)
#+END_SRC

#+RESULTS:
The arguments of the =PMLogit= class are:
- =returns_horizon=: number of time units to consider for predicting future returns. The increase or
  decrease (depending on the =direction= argument) of future returns is the target variable of our
  model. 
- =direction=: indicates whether the model will predict an increase in future returns (="up"=) or a
  decrease (="down"=). 
- =threshold=: absolute variation threshold of returns indicating a future increase or decrease
  (depends on the =direction= parameter). 
- =features=: list of indicators to use as explanatory variables in the logistic regression. 

** Downward movement

We create the downward future returns prediction model based on the same approach as the upward
model. The only difference is that we switch the direction from ="up"= to ="down"=.
#+BEGIN_SRC python :session :exports both :tangle dm2ml_tuto_01.py
pm_down = mpr.PMLogit(
    returns_horizon=15,
    direction="down",
    threshold=0.00001,
    features=[indic_1, indic_2],
)
#+END_SRC

#+RESULTS:

* Step 3: Creating a decision model

As we are using logistic regression to predict future returns, we need to use a decision model based
on both buy and sell predictive models. In MOSAIC, this means we need to create an instance of the
=DM2ML= class as follows:
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
import mosaic.decision_model as mdm

dm = mdm.DM2ML(
    pm_buy=pm_up,
    pm_sell=pm_down,
    buy_threshold=0.05,
    sell_threshold=0.125,
    )
#+END_SRC
This decision model allows you to specify:
- =pm_buy=: the model to predict buy signals, which is why we set our model to =pm_up=.
- =pm_sell=: the model to predict sell signals, which is why we set our model to =pm_sell=.
- =buy_threshold=: the absolute threshold above which a buy signal is generated by the decision model.
- =sell_threshold=: the absolute threshold above which a sell signal is generated by the decision model.

* Step 4: Fitting the decision model with OHLCV data

The decision model we have built consists of both the buy and sell predictive models. Like all
machine learning/statistical models, both models need to be fitted with data. 

First, let's retrieve some historical OHLCV data. We can use the MOSAIC =ExchangeCCXT= class to
connect to Binance and fetch the data. 
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
import mosaic.trading as mtr

exchange = mtr.ExchangeCCXT(name="binance")
exchange.connect()
#+END_SRC
Next, we can use the =get_historic_ohlcv= method from our =exchange= variable to retrieve the
historic BTC/FDUSD data between 2023-10-01 00:00:00 and 2023-10-10 00:00:00 with a 1-second
timeframe:
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
ohlcv_fit_df = \
    exchange.get_historic_ohlcv(
        date_start='2023-10-01 00:00:00',
        date_end='2023-10-10 00:00:00',
        symbol='BTC/FDUSD',
        timeframe='1s',
        index="datetime",
        data_dir=".",
        progress_mode=True,
    )
#+END_SRC

Finally, we can fit the decision model with the OHLCV data:
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
dm.fit(ohlcv_fit_df)
#+END_SRC

Note that you can check the fitting results of the prediction models using their =bkd=
attribute. Since the logistic regression model relies on the [[https://www.statsmodels.org/stable/index.html][Statsmodels library]], the =bkd=
attribute is an instance of a Statsmodels class.

Here are the parameters of the buy model:
#+BEGIN_SRC python :session :results output :exports both :tangle dm2ml_tuto_01.py
print(dm.pm_buy.bkd.summary())
#+END_SRC

And here, the parameters of the sell model:
#+BEGIN_SRC python :session :results output :exports both :tangle dm2ml_tuto_01.py
print(dm.pm_sell.bkd.summary())
#+END_SRC


* Step 5: Predicting buy and sell decisions

It is important to note that the =DM2ML= class generates buy/sell signals following this process:

1. Compute the buy score from the =pm_buy= model. This score is often interpreted as the probability
   of an upward movement in future returns. 
2. Compute the sell score from the =pm_sell= model. This score is often interpreted as the
   probability of a downward movement in future returns. 
3. Subtract the sell score from the buy score to obtain the signal score.
4. If the signal score is greater than the =buy_threshold=, generate a buy signal.
   If the signal score is less than the negative =sell_threshold=, generate a sell signal.
   Otherwise, no signal is generated.

To test our decision model, we will use BTC/FDUSD data between 2023-10-10 00:00:00 and 2023-10-15
00:00:00 with a 1-second timeframe.
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
ohlcv_test_df = \
    exchange.get_historic_ohlcv(
        date_start='2023-10-10 00:00:00',
        date_end='2023-10-15 00:00:00',
        symbol='BTC/FDUSD',
        timeframe='1s',
        index="datetime",
        data_dir=".",
        progress_mode=True,
    )
#+END_SRC

As the decision is now fitted, we can hence use the =predict= method to generate buy/sell signals. The
following call of =predict= shows the first 50 signals:  
#+BEGIN_SRC python :session :exports both :tangle dm2ml_tuto_01.py
dm.predict(ohlcv_test_df.head(50))
#+END_SRC
Remarks:
- The first 5 signals are =NaN= because the maximum length of data required to compute the
  indicators is 5. 
- Other =NaN= values correspond to cases when the absolute signal score is below both the buy
  threshold and the sell threshold. 


* Step 6: Evaluating the model

The conventional approach to evaluate a decision model is to compare the decisions made by the model
with the correct decisions made a posteriori. 

We can use the =compute_returns= method of both the buy and sell prediction models stored within our
=dm= instance to compute the associated returns at the prediction horizon (in this case, 15 time
units forward) for each datetime:
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
import pandas as pd

idx_buy = \
    dm.pm_buy.compute_returns(ohlcv_test_df)
idx_sell = \
    dm.pm_sell.compute_returns(ohlcv_test_df)
decisions_true = pd.Series("pass",
                           index=ohlcv_test_df.index,
                           dtype="object",
                           name="decision_true")
decisions_true.loc[idx_buy] = "buy"
decisions_true.loc[idx_sell] = "sell"
#+END_SRC

Then we compute the decisions made by our model:
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py
decisions_mod = dm.predict(ohlcv_test_df)
#+END_SRC

Let's create a confusion matrix to compare the decisions made by the model
(=decisions_mod["signal"]=) with the true/predicted labels (=decisions_true=):
#+BEGIN_SRC python :session :exports both :tangle dm2ml_tuto_01.py
decisions_confmat = pd.crosstab(decisions_mod["decision"], decisions_true)
decisions_confmat
#+END_SRC

We can also visually represent the results of the decision model using the `plotly` method. The
following code displays the decisions for the first 3600 timestamps:
#+BEGIN_SRC python :session :results silent :exports both :tangle dm2ml_tuto_01.py :comments org
fig = dm.plotly(
    ohlcv_test_df.iloc[:3600],
    layout=dict(
        title="Decision model results")
)
#+END_SRC

#+BEGIN_SRC python :session :results html :exports results :comments org
pio.to_html(fig, include_plotlyjs="cdn",
            full_html=False,
            config={'displayModeBar': False})
#+END_SRC



